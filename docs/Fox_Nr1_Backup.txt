/* ----  Project Desription -----

Project Name = FoxHunt
Oscilator = 8 MHz

=================================== SNIP =======================================

 MORSE ENCODING ...

 One morse character per BYTE, bitwise, LSB to MSB.

 0 = dit, 1 = dah.  The byte is shifted to the right bit by bit, until the
 last 1 is left, this 1 is an END OF CHARACTER indicator.
 A maximum of 7 elements can be encoded, (error) is excluded.



 KN -.--.   00101101       EOM       11111111   U ..-     00001100
 SK ...-.-  01101000       SPACE     00000000   V ...-    00011000
 AR .-.-.   00101010       D -..     00001001   W .--     00001110
 BT -...-   00110001       E .       00000010   X -..-    00011001
 AS .-...   00100010       F ..-.    00010100   Y -.--    00011101
  / -..-.   00101001       G --.     00001011   Z --..    00010011
  0 -----   00111111       H ....    00010000
  1 .----   00111110       I ..      00000100   1 .       00000010
  2 ..---   00111100       J .---    00011110   2 ..      00000100
  3 ...--   00111000       K -.-     00001101   3 ...     00001000
  4 ....-   00110000       L .-..    00010010   4 ....    00010000
  5 .....   00100000       M --      00000111   5 .....   00100000
  6 -....   00100001       N -.      00000101   6 -.      00000101
  7 --...   00100011       O ---     00001111   7 -..     00001001
  8 ---..   00100111       P .--.    00010110   8 -...    00010001
  9 ----.   00101111       Q --.-    00011011   9 -....   00100001
  A .-      00000110       R .-.     00001010   0 -.....  01000001
  B -...    00010001       S ...     00001000
  C -.-.    00010101       T -       00000011

============================ SNIP ============================================*/

// ----------------------------- Define Global Variables -----------------------------

char  Delay_to_Start = 0;     // Min*10
char  Max_Time = 150;         // Min*10
char  Hunt_Type = 1;          // Hunt type (1 - 15)
char  Frequency = 3;          // Frequency (3,5 ; 144 ; both) 3 = 3,5  144 = 144  255 = both
//Speed of CW 5 WPM   1200/5 = 240 ms   Based upon a 50 dot duration standard word such as PARIS
unsigned  WPM_data = 5;              // WPM sending normal data MOx
unsigned  WPM_data_ID = 20;          // WPM sending ID
char FoxHunters_Enable = 0;          // Enable Sending FoxHunters number
char FoxSndID_Enable = 1;            // Enable Sending Fox ID
unsigned Foxes = 5;                      // Number of Foxes
unsigned Cycle = 5;                      // Min of a Cycle
unsigned FoxCycle = 0;                   // sec of a FoxCycle
char MinuteToEnd = 0;
char Time = 0;
char Sec = 0;
char Minute = 0;
char Hour = 0;
char SecToTx = 61;
int  Delay_to_Start_Led = 0;
int Max_Time_Var = 1;
char  Program_Flg = 0;

char Programming_Fox = 0;
char Programming_Fox_Data[7];
char Programming_Fox_Cnt = 0;
char LoadParam = 0;
char ClearParam =0;

char Message_to_Send_Wrd_1 = 0b00000111; // M    10
char Message_to_Send_Wrd_2 = 0b00001111; // 0    14
//...............................................................................
char Message_to_Send_Wrd_3 = 0b00000010;         // Fox Number 1
char data_lgt_fox = 4;                           // Length of the Morse Fox Count  4
char FoxHuntNumber = 0x01;            // Fox Hunt Number  - max foxes 254
//...............................................................................
//char Message_to_Send_Wrd_3 = 0b00000100;         // Fox Number 2
//char data_lgt_fox = 6;                           // Length of the Morse Fox Count  6
//char FoxHuntNumber = 0x02;          // Fox Hunt Number  - max foxes 254
//...............................................................................
//char Message_to_Send_Wrd_3 = 0b00001000;         // Fox Number 3
//char data_lgt_fox = 8;                           // Length of the Morse Fox Count  8
//char FoxHuntNumber = 0x03;                  // Fox Hunt Number  - max foxes 254
//...............................................................................
//char Message_to_Send_Wrd_3 = 0b00010000;         // Fox Number 4
//char data_lgt_fox = 10;                           // Length of the Morse Fox Count  10
//char FoxHuntNumber = 0x04;                  // Fox Hunt Number  - max foxes 254
//...............................................................................
//char Message_to_Send_Wrd_3 = 0b00100000;         // Fox Number 5
//char data_lgt_fox = 12;                           // Length of the Morse Fox Count  12
//char FoxHuntNumber = 0x05;                       // Fox Hunt Number  - max foxes 254
//...............................................................................
char Message_to_Send_Wrd_4 = 0b00001000; // S    Fox ID        8
char Message_to_Send_Wrd_5 = 0b00000111; // M    Fox ID        10
char Message_to_Send_Wrd_6 = 0b00100001; // 6    Fox ID        14
char Message_to_Send_Wrd_7 = 0b00001010; // R    Fox ID        10
char Message_to_Send_Wrd_8 = 0b00011001; // X    Fox ID        14
char Message_to_Send_Wrd_9 = 0b00010011; // Z    Fox ID        14
char Message_to_Send_FoxHunters_1 = 0x00;
char Message_to_Send_FoxHunters_2 = 0x00;
char data_lgt = 0;

char HunterNumer = 0;
char HunterSec = 0;
char HunterMinute = 0;
char HunterHour = 0;
char FoxFinderNumer = 0;

int CW_Speed_1 = 0;
int CW_Speed_2 = 0;
char EEP_data = 0;
char UART_Read_Data = 0;
char EEP_Data_Read_Write = 0;
int i=0;
int j=0;

int TimeToEnd=0;
int TimeDev = 0;
int TimeToSend = 0;
char TimeHntNr_1 = 0;
char TimeHntNr_2 = 0;
int Wait_Time = 0;
int data1=0;
int data2=0;
int data3=0;
int data4=0;
int data5=0;



////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///////////////////////////////-- Interrupt--///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


// PORTA.F1 =  LED_Mode;
// PORTA.F0 =  LED_R_W;
// PORTA.F4 =  CW_Keying;      // Sending Morse
// PORTA.F3 =  En_144;
// PORTA.F2 =  En_3,5 ;
// PORTB.F7 =  Crystal 1;
// PORTB.F6 =  Crystal 2;
// PORTB.F4 =  Low Pow;
// PORTB.F3 =  PWM ;
// PORTB.F2 =  Rx;
// PORTB.F5 =  Tx ;


void LED_Mode(char data) { PORTA.F1 = data;}
void LED_R_W(char data)  { PORTA.F0 = data;}
void CW_Keying(char data){ PORTA.F4 = data;}
void En_144(char data)   { PORTA.F3 = data;}
void En_3(char data)     { PORTA.F2 = data;}
void Crystal_1(char data){ PORTB.F7 = data;}
void Crystal_2(char data){ PORTB.F6 = data;}
void Low_Pow(char data)  { PORTB.F4 = data;}






// ---------------Reset Function -----------------------------------------------
void Reset()
{
  PCLATH = 0x00;
  PCL = 0x00;
}


// ------------- Serial Read Write Mode Function ---------------------------------------------------------------------------------
void Mode()
{
// -----  Program / Read / Erase Fox ---

     if(Programming_Fox == 1)          // ------- Program Fox ---
     {

       if (EEP_Data_Read_Write == 2)
       {
          Programming_Fox_Cnt++;
          Programming_Fox_Data[Programming_Fox_Cnt] = UART_Read_Data ;

          if(Programming_Fox_Cnt >= 5)
          {
             INTCON = 0x00;
             for(i=1;i<6;i++)
             {
               EEPROM_Write(i, Programming_Fox_Data[i]);
               delay_ms(20);
             }
             INTCON = 0xE0;
             EEPROM_Write(0,FoxHuntNumber);
             Programming_Fox_Cnt = 0;
             EEP_Data_Read_Write = 0;
             Programming_Fox = 0;
             delay_ms(200);
             Reset();
          }
      }

      else if (EEP_Data_Read_Write == 1)  // ------- Read all EEP data ---
      {
         INTCON = 0x00;
         Usart_Write(FoxHuntNumber);
         delay_ms(10);
         for(i=10;i<170;i++)
         {
            EEP_data = EEPROM_Read(i);
            Usart_Write(EEP_data);
            delay_ms(10);
         }
         EEP_Data_Read_Write = 0;
         Programming_Fox = 0;
         INTCON = 0xE0;
         LED_R_W(0);
     } // End Read

     else if (EEP_Data_Read_Write == 3)    // ------------ Clear EEP ---
     {
        INTCON.T0IE = 0;
        for(i=10;i<170;i++)
        {
            EEPROM_Write(i,0x00);
            delay_ms(5);
        }
        EEP_Data_Read_Write = 0;
        Programming_Fox = 0;
        INTCON.T0IE = 1;
        LED_R_W(0);
    }
  }


// -----  Send to Puncher the Time ---

  if(HunterNumer<0x2F)  //(Hunter_Present == 1)&&
  {
     Usart_Write(FoxHuntNumber);             // and send data via UART
     Usart_Write(HunterHour);                // and send data via UART
     Usart_Write(HunterMinute);              // and send data via UART
     Usart_Write(HunterSec);                 // and send data via UART

     INTCON = 0x00;
     EEPROM_Write(((4*FoxFinderNumer)+10),HunterNumer);
     EEPROM_Write(((4*FoxFinderNumer)+11),HunterHour);
     EEPROM_Write(((4*FoxFinderNumer)+12),HunterMinute);
     EEPROM_Write(((4*FoxFinderNumer)+13),HunterSec);
     EEPROM_Write(255,FoxFinderNumer);   // Address 255 The number of the finders
     INTCON = 0xE0;
     HunterNumer = 0;
     FoxFinderNumer++;
  }
}


//-----------------------------------------------------------------------------------------------------------------------------------
//---------------------------- Interrupt Program ---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------

void Interrupt()
{

//---------- Timer Function -----------

   if(INTCON.T0IF == 1)   //     Interrupt generated at 16,384 ms
      {
       Time++;

       if(Time >= 61 )
       {
        Sec++;
        if(TimeToSend > 0) TimeToSend--;
        if((Delay_to_Start_Led > 0)&(Program_Flg != 0xFF)) PORTA.F1 =!PORTA.F1;
        if(Sec >= 60 )
         {
           Minute++;
           if(Delay_to_Start_Led > 0) Delay_to_Start_Led--;
           if((Max_Time_Var > 0)&(Delay_to_Start_Led == 0)) Max_Time_Var--;
           if(Minute >= 60 ) Hour++, Minute=0;
           Sec=0;
         }

        Time=0;
        }

       if(LoadParam == 0)
       {
        Delay_to_Start = EEPROM_Read(1);     // Scaling 10 Min
        Max_Time = EEPROM_Read(2);           // Scaling 10 Min
        Hunt_Type = EEPROM_Read(3);          // Hunt type (1 - 15)
        Frequency = EEPROM_Read(4);          // Frequency (3,5 ; 144 ; both) 3 = 3,5  14 = 144  25 = both
        Program_Flg = EEPROM_Read(5);

        Max_Time_Var = Max_Time*10;
        Delay_to_Start_Led = Delay_to_Start* 10;
        LoadParam = 1;
       }
       INTCON.T0IF = 0;
   }



//---------- Read UART Data -----------
   else
   {

       UART_Read_Data = Usart_Read();     // read the received data,
       if((UART_Read_Data >0)&(UART_Read_Data < 0x2F)&(Programming_Fox==0)&(Max_Time_Var>0)&(Program_Flg<0xFF)&(Delay_to_Start_Led==0)) // Verify if is Puncher
       {
        LED_R_W(1);
        SecToTx = 0;
        HunterNumer = UART_Read_Data;
        HunterSec = Sec;
        HunterMinute = Minute;
        HunterHour  = Hour;
        Mode();
       }

      else     // Else - read diagnosis commands
        {
          if((EEP_Data_Read_Write==2)&(Programming_Fox==1)) Mode();
          else if(UART_Read_Data == 0x50) Programming_Fox = 1, LED_R_W(1);     // Led ON
          else if((UART_Read_Data == 0x3F)&(EEP_Data_Read_Write==0)&(Programming_Fox==1)) EEP_Data_Read_Write = 2;   // Write
          else if((UART_Read_Data == 0x2F)&(EEP_Data_Read_Write==0)&(Programming_Fox==1)) EEP_Data_Read_Write = 1, Mode();   // Read
          else if((UART_Read_Data == 0xFF)&(EEP_Data_Read_Write==0)&(Programming_Fox==1)) EEP_Data_Read_Write = 3, Mode();   // Clear EEP
          else if((UART_Read_Data == 0x4F)&(EEP_Data_Read_Write==0)&(Programming_Fox==1)) Reset();   // Reset Fox
       }
   }
   
   if(SecToTx < 61) SecToTx++;
   else if(Programming_Fox==0) LED_R_W(0);
   
   // -------- Set the Flag after the Hunt ----------
   if((Max_Time_Var == 0)&(Programming_Fox ==0)&(Delay_to_Start_Led == 0))
   {
    LED_R_W(1);           // R/W Led ON
    EEPROM_Write(5,0xFF);
   }
} // End Interrupt



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////-----------------MAIN--------------------////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




// ----------------------- Init ECU Function ------------------------
void init()
{
//OSCCON= 0x75;

ANSEL  = 0x00;         // Configure AN pins as digital  ANSELH = 0;
ADCON0 = 0x00;
CMCON = 0x07;
TRISA = 0xC0;       // Configure PORT A as Input
TRISB = 0x07;       // Configure PORT B as Input

PORTA = 0x00;       // Set PORT A to 0x00;
PORTB = 0x00;       // Set PORT B to 0x00;


OPTION_REG = 0xC6;      // Activate 8 bit Timer - Prescaler Rate 128  => Interrupt generated at 16,384 ms
INTCON = 0xE0;          // Activate Interrupt - PEIE: Peripheral Interrupt Enable bit   - T0IE: Timer0 Overflow Interrupt Enable bit
PIE1 = 0x20;            // RCIE: EUSART Receive Interrupt Enable

Usart_Init(9600);       // Initialize UART module at 9600 bps

Pwm_Init(700);
Pwm_Start();

Pwm_Change_Duty(0);
CW_Keying(0);
Low_Pow(1);                     // Activate high power by default
LED_Mode(1);


}


// ----------------------- Type Function ------------------------
void Type(int Hunt_Type)
{
if(Hunt_Type == 0x01)       Cycle = 0,  Foxes = 1,  FoxHunters_Enable = 1;    // GRJ 1 1
else if(Hunt_Type == 0x02)  Cycle = 2,  Foxes = 2,  FoxHunters_Enable = 1;    // GRJ 1 2
else if(Hunt_Type == 0x03)  Cycle = 3,  Foxes = 3,  FoxHunters_Enable = 1;    // GRJ 1 3
else if(Hunt_Type == 0x04)  Cycle = 4,  Foxes = 4,  FoxHunters_Enable = 1;    // GRJ 1 4
else if(Hunt_Type == 0x05)  Cycle = 5,  Foxes = 5,  FoxHunters_Enable = 1;    // GRJ 1
else if(Hunt_Type == 0x06)  Cycle = 7,  Foxes = 7,  FoxHunters_Enable = 1;    // GRJ 2
else if(Hunt_Type == 0x07)  Cycle = 10, Foxes = 10, FoxHunters_Enable = 1;    // GRJ 3
else if(Hunt_Type == 0x08)  Cycle = 5,  Foxes = 5,  FoxHunters_Enable = 0;    // SM Night
else if(Hunt_Type == 0x09)  Cycle = 7,  Foxes = 7,  FoxHunters_Enable = 0;    // SM Day
else if(Hunt_Type == 0x0A)  Cycle = 10, Foxes = 10, FoxHunters_Enable = 0;
else if(Hunt_Type == 0x0B)  Cycle = 0,  Foxes = 5,  FoxHunters_Enable = 0, Low_Pow(0);    // Beginners training/show or Foxoring 1
else if(Hunt_Type == 0x0C)  Cycle = 0,  Foxes = 7,  FoxHunters_Enable = 0, Low_Pow(0);    // Foxoring 2
else if(Hunt_Type == 0x0D)  Cycle = 0,  Foxes = 10, FoxHunters_Enable = 0, Low_Pow(0);    // Foxoring 3
else if(Hunt_Type == 0x0E)  Cycle = 0,  Foxes = 1,  FoxHunters_Enable = 0, FoxSndID_Enable = 0, Message_to_Send_Wrd_3 = 0b00010001, data_lgt_fox=12;   // Beacon for Sprint
else if(Hunt_Type == 0x0F)  Cycle = 1,  Foxes = 5,  FoxHunters_Enable = 0, Low_Pow(0),  FoxSndID_Enable = 0, WPM_data=10;    // Sprint 1
//else if(Hunt_Type == 0x0F)  Cycle = 1,  Foxes = 5,  FoxHunters_Enable = 0, Low_Pow(1),  FoxSndID_Enable = 0, WPM_data=14;    // Sprint 2
else if(Hunt_Type == 0x10)  Cycle = 2,  Foxes = 10, FoxHunters_Enable = 0, FoxSndID_Enable = 0,              WPM_data=16;    // Renberg-hunt
else if(Hunt_Type == 0x11)  Cycle = 5,  Foxes = 5,  FoxHunters_Enable = 0, FoxSndID_Enable = 1;   // National
else Cycle = 5,  Foxes = 5,  FoxHunters_Enable = 1;    // GRJ 1
Crystal_1(1);
Crystal_2(0);

if (Hunt_Type == 0x0E)
{
  if (FoxHuntNumber == 6)
  {
    Message_to_Send_Wrd_3 = 0b00010000;  //6 -> 4
    data_lgt_fox=10;
    FoxHuntNumber = 0x04;
    Crystal_1(0);
    Crystal_2(1);
  }
  else if (FoxHuntNumber == 7)
  {
    Message_to_Send_Wrd_3 = 0b00100000;  //7 -> 5
    data_lgt_fox=12;
    FoxHuntNumber = 0x05;
    Crystal_1(0);
    Crystal_2(1);
  }
}

if (Hunt_Type == 0x0F)
{
  if (FoxHuntNumber == 6)
  {
    char Message_to_Send_Wrd_3 = 0b00000010;         // Fox Number 1
    char data_lgt_fox = 4;                           // Length of the Morse Fox Count  4
    char FoxHuntNumber = 0x01;                       // Fox Hunt Number  - max foxes 254
    WPM_data=14;
    Crystal_1(0);
    Crystal_2(1);
  }
   else if (FoxHuntNumber == 7)
  {
    char Message_to_Send_Wrd_3 = 0b00000100;         // Fox Number 2
    char data_lgt_fox = 6;                           // Length of the Morse Fox Count  6
    char FoxHuntNumber = 0x02;                       // Fox Hunt Number  - max foxes 254
    WPM_data=14;
    Crystal_1(0);
    Crystal_2(1);
  }
   else if (FoxHuntNumber == 8)
  {
    char Message_to_Send_Wrd_3 = 0b00001000;         // Fox Number 3
    char data_lgt_fox = 8;                           // Length of the Morse Fox Count  8
    char FoxHuntNumber = 0x03;                       // Fox Hunt Number  - max foxes 254
    WPM_data=14;
    Crystal_1(0);
    Crystal_2(1);
  }
   else if (FoxHuntNumber == 9)
  {
    char Message_to_Send_Wrd_3 = 0b00010000;         // Fox Number 4
    char data_lgt_fox = 10;                          // Length of the Morse Fox Count  10
    char FoxHuntNumber = 0x04;                       // Fox Hunt Number  - max foxes 254
    WPM_data=14;
    Crystal_1(0);
    Crystal_2(1);
  }
   else if (FoxHuntNumber == 10)
  {
    char Message_to_Send_Wrd_3 = 0b00100000;         // Fox Number 5
    char data_lgt_fox = 12;                           // Length of the Morse Fox Count  12
    char FoxHuntNumber = 0x05;                       // Fox Hunt Number  - max foxes 254
    WPM_data=14;
    Crystal_1(0);
    Crystal_2(1);
  }
}


if(Frequency == 0x00)      En_144(0), En_3(1);  // Enable 3,5
else if(Frequency == 0x01) En_144(1), En_3(0);  // Enable 144
else if(Frequency == 0x02) En_144(1), En_3(1);  // Enable both
else                       En_144(0), En_3(1);  // Enable 3,5

CW_Speed_1 = 1200 / WPM_data;           // Calculate WPM in ms
CW_Speed_2 = 1200 / WPM_data_ID;        // Calculate WPM in ms
FoxCycle = Cycle * (60000 / Foxes);     // Calculate Time to send in ms

}


 // --------------------------- Convert To Morse -----------------------------------------
char ConvertToMorse(char lettre_cw)
{
char Conv_Data = 0;

 switch(lettre_cw)
 {
 case 0: Conv_Data = 0b00111111, data_lgt= 22; break;
 case 1: Conv_Data = 0b00111110, data_lgt= 20; break;
 case 2: Conv_Data = 0b00111100, data_lgt= 18; break;
 case 3: Conv_Data = 0b00111000, data_lgt= 16; break;
 case 4: Conv_Data = 0b00110000, data_lgt= 14; break;
 case 5: Conv_Data = 0b00100000, data_lgt= 12; break;
 case 6: Conv_Data = 0b00100001, data_lgt= 14; break;
 case 7: Conv_Data = 0b00100011, data_lgt= 16; break;
 case 8: Conv_Data = 0b00100111, data_lgt= 18; break;
 case 9: Conv_Data = 0b00101111, data_lgt= 20; break;
 }
 return Conv_Data;
}


// --------------------------- Send Word Function -----------------------------------------
 void Send_Word(int Speed, int Word)
 {
  if (Word == 0) VDelay_ms(Speed*2);   // Word Space time 5 dots
  if (Word == 0xFF) {}
  else
  {
   while(Word>1)
   {
     if((Word & 0x01) == 0x01)
       {

        CW_Keying(1);          // Dash            3 dots
        Pwm_Change_Duty(127);
        VDelay_ms(Speed*3);
        CW_Keying(0);
        Pwm_Change_Duty(0);
        }
     else
        {

        CW_Keying(1);         // Dot               1 dot
        Pwm_Change_Duty(127);
        VDelay_ms(Speed);
        CW_Keying(0);
        Pwm_Change_Duty(0);
        }
     Word = Word >> 1;
     VDelay_ms(Speed);        // Inter Dot Space    1 dot
   }
   VDelay_ms(Speed*2);        // Inter Char Space   3 dots

   while(Programming_Fox == 1)
   {
    CW_Keying(0);
    Pwm_Change_Duty(0);
   }
  }
 }



//_______________________________________________________________________________
//______________________________ Start Main Program _____________________________
//_______________________________________________________________________________

void main()
{
// ------- Initialize the Micro --------

init();
while(LoadParam == 0) {}
Type(Hunt_Type);




// ------- Verify if not Prog --------
while(Program_Flg == 0xFF)
{
 Vdelay_ms(500);
}

// ------- Delay to start --------
while(Delay_to_Start_Led){}

Sec = 0;
Minute = 0;
Hour = 0;
LED_Mode(0);     // LED OFF

Wait_Time =((FoxHuntNumber-1) * (FoxCycle /1000));
if(Cycle != 0x00)
{
  for(j=0;j<Wait_Time;j++)
  {
  Vdelay_ms(1000);
  }
}


// -----------------------  Start Sendin Morse Data Program --------------------
  while(1)
    {
    
        // --- enable the frequency befor transmission
        if(Frequency == 0x00)      En_144(0), En_3(1);  // Enable 3,5
        else if(Frequency == 0x01) En_144(1), En_3(0);  // Enable 144
        else if(Frequency == 0x02) En_144(1), En_3(1);  // Enable both
        else                       En_144(0), En_3(1);  // Enable 3,5

        // --- If the Hunt is finish - send Fox ID
        while(Max_Time_Var == 0)
        {
           LED_Mode(1);
           Send_Word(CW_Speed_1, Message_to_Send_Wrd_3);  // 2*  dot  x
           LED_Mode(0);
           Vdelay_ms(500);
        }

        if(Cycle != 0x00)
        {

          Message_to_Send_FoxHunters_1 = ConvertToMorse(FoxFinderNumer/10);
          TimeHntNr_1 = data_lgt;
          Message_to_Send_FoxHunters_2 = ConvertToMorse(FoxFinderNumer - ((FoxFinderNumer/10)*10));
          if(Message_to_Send_FoxHunters_1 == 63) TimeHntNr_1 = 0, Message_to_Send_FoxHunters_1=0xFF;
          TimeHntNr_2 = data_lgt;

          if((FoxHunters_Enable == 1) & (FoxSndID_Enable == 1)) TimeDev = ((TimeHntNr_1 + TimeHntNr_2 + 8)*CW_Speed_1) + 8820;
          else if(FoxSndID_Enable == 1) TimeDev = 8820;
          else TimeDev = 4500 ;

          TimeToSend = FoxCycle /1000;         // Calculate Time to send in s
          data4 = data_lgt_fox + 26;           // Calculate MOx length 38
          data5 = (CW_Speed_1*data4);          // Calculate Time to send MOx in ms


          // calculate WPM Drifting-------------------
          data1 =  (FoxCycle - TimeDev)/data5;
          data2 =  ((FoxCycle - TimeDev)%data5);
          if((data5-data2 ) > 5500) data3 = CW_Speed_1 + (data2/data4/data1);
          else data1 = data1+1, data3 = (CW_Speed_1 - ((data5 - data2 )/data4/data1));
          //----------------------------------------------
        }
        else
        {
         data3 = CW_Speed_1;
         data1 = 5;
        }

        while(data1 > 0)          // Send MOx
        {
          Send_Word(data3, Message_to_Send_Wrd_1);  // 10 dot
          Send_Word(data3, Message_to_Send_Wrd_2);  // 14 dot
          Send_Word(data3, Message_to_Send_Wrd_3);  // 2*  dot  x
          Send_Word(data3, 0);                      // 2 dot
          data1--;
        }

        if(FoxSndID_Enable == 1)   // Send Fox ID
        {
          Send_Word(CW_Speed_2, Message_to_Send_Wrd_4);  //  8 dot
          Send_Word(CW_Speed_2, Message_to_Send_Wrd_5);  //  10  dot
          Send_Word(CW_Speed_2, Message_to_Send_Wrd_6); //   14 dot
          Send_Word(CW_Speed_2, Message_to_Send_Wrd_7); //   10 dot
          Send_Word(CW_Speed_2, Message_to_Send_Wrd_8); //   14 dot
          Send_Word(CW_Speed_2, Message_to_Send_Wrd_9); //   14 dot
          Send_Word(CW_Speed_2, 0);                     //   2 dot
        }                                             //  ______________
                                                      //     72 dots
        if(FoxHunters_Enable == 1)  // If FoxHounters count enable, send the Hunters Number
        {
          Send_Word(CW_Speed_1,Message_to_Send_FoxHunters_1);   //0
          Send_Word(CW_Speed_1,Message_to_Send_FoxHunters_2);   // 22
          Send_Word(CW_Speed_1, 0);                // 5 dot
        }





       if(Cycle != 0x00)
       {
        CW_Keying(1);
        Pwm_Change_Duty(127);
        while(TimeToSend > 0) delay_ms(10);
        CW_Keying(0);
        Pwm_Change_Duty(0);
        
        En_144(0), En_3(0);          // disable the transmission for both Frq

        Wait_Time =((Foxes-1) * (FoxCycle /1000));
        for(j=0;j<Wait_Time;j++)
         {
          Vdelay_ms(1000);
         }
       }
       
       else
       {
        Send_Word(CW_Speed_1, 0);
       }

     } // End While

} // End Main

//_______________________________________________________________________________
//______________________________ End Main Program _______________________________
//_______________________________________________________________________________
















